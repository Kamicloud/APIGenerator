apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'idea'

springBoot {
    mainClassName = 'com.github.kamicloud.stub.core.StubApi1'
}
dependencies {

    // java抽象语法树
    implementation 'com.github.javaparser:javaparser-core:3.15.22'
    implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.15.22'
    implementation 'com.github.javaparser:javaparser-core-serialization:3.15.22'
    // google gson
    implementation 'com.google.code.gson:gson:2.8.6'
    // 字符串处理库
    implementation 'com.google.guava:guava:29.0-jre'
//    compile 'org.dom4j:dom4j:2.1.1'
    implementation 'org.yaml:snakeyaml'
    implementation 'com.squareup.okhttp3:okhttp:3.12.0'

    implementation 'org.thymeleaf:thymeleaf:3.0.11.RELEASE'
    implementation "org.springframework.boot:spring-boot"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"

    implementation "org.springframework.boot:spring-boot-loader-tools"
//    compile "org.springframework.boot:spring-boot-starter-mail"
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-aop"


    testImplementation group: 'junit', name: 'junit', version: '4.12'
    implementation "org.springframework.boot:spring-boot-configuration-processor"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
}

configurations.implementation.setCanBeResolved(true)


task binaryJar(type: Jar, dependsOn: classes) {
    manifest {
        attributes 'Main-Class': 'com.github.kamicloud.stub.core.StubApi'
        attributes 'Class-Path': configurations.implementation.collect { it.getName() }.join(' ')
    }
    from sourceSets.main.java.outputDir
    from sourceSets.main.resources
}
task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.java.outputDir
    from sourceSets.main.resources
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    archives binaryJar
    archives sourcesJar
    archives javadocJar
}

